buildscript {
    repositories {
        mavenLocal()
        maven { name "Alibaba"; url 'https://maven.aliyun.com/nexus/content/groups/public/' }
        mavenCentral()
    }
    dependencies {
        classpath("io.spring.javaformat:spring-javaformat-gradle-plugin:0.0.28")
    }
}

plugins {
    id 'org.springframework.boot' version '2.4.3' apply false
    id 'io.spring.dependency-management' version '1.0.11.RELEASE' apply false
}

allprojects {
    group = 'live.lingting'
    version = '0.0.2-SNAPSHOT'

    repositories {
        mavenLocal()
        maven { name "Alibaba"; url 'https://maven.aliyun.com/nexus/content/groups/public/' }
        mavenCentral()
    }

    // 跳过测试
    gradle.taskGraph.whenReady {
        tasks.each { task ->
            if (task.name.contains("test")) {
                task.enabled = false
            }
        }
    }
}

subprojects {
    apply {
        plugin 'java'
        plugin 'idea'
        plugin 'io.spring.dependency-management'
        plugin 'io.spring.javaformat'
        from "${rootDir}/config.gradle"
    }

    idea {
        module {
            inheritOutputDirs = false
            outputDir = compileJava.destinationDirectory.getAsFile().getOrNull();
            testOutputDir = compileTestJava.destinationDirectory.getAsFile().getOrNull();
        }
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    dependencies {
        implementation 'org.mapstruct:mapstruct'
        implementation 'org.springframework.boot:spring-boot-starter'
        compileOnly 'org.projectlombok:lombok'
        compileOnly 'org.springframework.boot:spring-boot-autoconfigure'
        annotationProcessor 'org.springframework.boot:spring-boot-autoconfigure'
        compileOnly 'org.springframework.boot:spring-boot-configuration-processor'
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }

    java.sourceCompatibility(JavaVersion.VERSION_1_8)
    java.targetCompatibility(JavaVersion.VERSION_1_8)
    // java编译的时候缺省状态下会因为中文字符而失败
    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

}