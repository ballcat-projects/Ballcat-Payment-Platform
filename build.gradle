import org.springframework.boot.gradle.plugin.DependencyManagementPluginAction
import org.springframework.boot.gradle.plugin.SpringBootPlugin
import org.springframework.boot.gradle.util.VersionExtractor

buildscript {
    repositories {
        mavenLocal()
        maven { name "Alibaba"; url 'https://maven.aliyun.com/nexus/content/groups/public/' }
        mavenCentral()
    }
    dependencies {
        classpath("io.spring.javaformat:spring-javaformat-gradle-plugin:0.0.28")
    }
}

plugins {
    id 'org.springframework.boot' version '2.4.3' apply false
    id 'io.spring.dependency-management' version '1.0.11.RELEASE' apply false
}

allprojects {
    group = 'live.lingting'
    version = '0.0.2-SNAPSHOT'

    repositories {
        mavenLocal()
        maven { name "Alibaba"; url 'https://maven.aliyun.com/nexus/content/groups/public/' }
        mavenCentral()
    }

    // 跳过测试
    gradle.taskGraph.whenReady {
        tasks.each { task ->
            if (task.name.contains("test")) {
                task.enabled = false
            }
        }
    }
}

subprojects {
    apply {
        plugin 'java'
        plugin 'idea'
        plugin 'io.spring.dependency-management'
        plugin 'io.spring.javaformat'
    }

    dependencies {
        implementation 'cn.hutool:hutool-core'
        implementation 'org.mapstruct:mapstruct'
        implementation 'org.springframework.boot:spring-boot-starter'
        compileOnly 'org.projectlombok:lombok'
        compileOnly 'org.springframework.boot:spring-boot-autoconfigure'
        annotationProcessor 'org.springframework.boot:spring-boot-autoconfigure'
        compileOnly 'org.springframework.boot:spring-boot-configuration-processor'
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }

    dependencyManagement {
        imports {
            mavenBom SpringBootPlugin.BOM_COORDINATES
        }

        dependencies {
            dependency('org.mapstruct:mapstruct:1.4.2.Final')
            dependency('cn.hutool:hutool-core:5.5.8')
            dependency('cn.hutool:hutool-http:5.5.8')
            dependency('cn.hutool:hutool-extra:5.5.8')
            dependency('io.springfox:springfox-boot-starter:3.0.0')
            dependency('mysql:mysql-connector-java:8.0.23')
            dependency('com.baomidou:mybatis-plus-extension:3.4.2')
            dependency('com.baomidou:mybatis-plus-boot-starter:3.4.2')
            dependency('de.codecentric:spring-boot-admin-starter-client:2.4.1')
            dependency('org.springframework.security.oauth:spring-security-oauth2:2.3.8.RELEASE')
            dependency('live.lingting:virtual-currency-all:0.4.2')
            dependency('com.alipay.sdk:alipay-sdk-java:4.11.28.ALL')

            dependency('org.springframework.boot:spring-boot-starter-web:' + VersionExtractor.forClass(DependencyManagementPluginAction.class)) {
                exclude group: 'org.springframework.boot', name: 'spring-boot-starter-tomcat'
            }
        }
    }


    // 这样子自己写的 @ConfigurationProperties 类里面的字段就有代码提示了。
    idea {
        module {
            inheritOutputDirs = false
            outputDir = compileJava.destinationDirectory.getAsFile().getOrNull()
            testOutputDir = compileTestJava.destinationDirectory.getAsFile().getOrNull()
        }
    }

    // 打包时使用 -Pprofiles='test' 指定打包时的环境
    processResources {
        filesMatching("application*.yml") {
            def map = project.properties
            map.put("profiles", project.hasProperty('profiles') ? project.findProperty("profiles") : "dev")
            expand(map)
        }
    }

    // 指定打包后的jar包文件名
    pluginManager.withPlugin('org.springframework.boot') {
        bootJar {
            archiveFileName.set("${project.name}.jar")
        }
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    java.sourceCompatibility(JavaVersion.VERSION_1_8)
    java.targetCompatibility(JavaVersion.VERSION_1_8)
    // java编译的时候缺省状态下会因为中文字符而失败
    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    // idea 直接启动是走的 classes 方法。 或者需要在这里进行删除操作
    classes.doLast {
        // 删除build 生成 的 generated文件夹， 免得idea 认为里面有源码， 新增一个模块出来.
        delete([getBuildDir().path + "/generated"])
    }
}